"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "(pages-dir-browser)/./hooks/useCryptoIcons.ts":
/*!*********************************!*\
  !*** ./hooks/useCryptoIcons.ts ***!
  \*********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useCryptoIcons: () => (/* binding */ useCryptoIcons)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(pages-dir-browser)/./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\nconst useCryptoIcons = ()=>{\n    const [icons, setIcons] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(true);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useCryptoIcons.useEffect\": ()=>{\n            // Since the API endpoint for fetching icons has been removed,\n            // we will no longer fetch icons from a backend.\n            // In a real application, you would replace this with a different\n            // method of acquiring icon data, e.g., from a static data file\n            // or an external service. For now, we will simply set an empty array.\n            setIcons([]);\n            setLoading(false);\n            setError(\"Icon API endpoint removed. Icons are not being fetched.\");\n        }\n    }[\"useCryptoIcons.useEffect\"], []);\n    return {\n        icons,\n        loading,\n        error\n    };\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL2hvb2tzL3VzZUNyeXB0b0ljb25zLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE0QztBQVVyQyxNQUFNRSxpQkFBaUI7SUFDNUIsTUFBTSxDQUFDQyxPQUFPQyxTQUFTLEdBQUdKLCtDQUFRQSxDQUFlLEVBQUU7SUFDbkQsTUFBTSxDQUFDSyxTQUFTQyxXQUFXLEdBQUdOLCtDQUFRQSxDQUFDO0lBQ3ZDLE1BQU0sQ0FBQ08sT0FBT0MsU0FBUyxHQUFHUiwrQ0FBUUEsQ0FBZ0I7SUFFbERDLGdEQUFTQTtvQ0FBQztZQUNSLDhEQUE4RDtZQUM5RCxnREFBZ0Q7WUFDaEQsaUVBQWlFO1lBQ2pFLCtEQUErRDtZQUMvRCxzRUFBc0U7WUFDdEVHLFNBQVMsRUFBRTtZQUNYRSxXQUFXO1lBQ1hFLFNBQVM7UUFDWDttQ0FBRyxFQUFFO0lBRUwsT0FBTztRQUFFTDtRQUFPRTtRQUFTRTtJQUFNO0FBQ2pDLEVBQUUiLCJzb3VyY2VzIjpbIi9Vc2Vycy92aWV0dnRjNC9Eb2N1bWVudHMvQ3J5cHRvaWNvbnMvaG9va3MvdXNlQ3J5cHRvSWNvbnMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcblxuaW50ZXJmYWNlIENyeXB0b0ljb24ge1xuICBuYW1lOiBzdHJpbmc7XG4gIGRpc3BsYXlOYW1lOiBzdHJpbmc7XG4gIHN5bWJvbDogc3RyaW5nIHwgbnVsbDtcbiAgcGF0aDogc3RyaW5nO1xuICBmaWxlTmFtZTogc3RyaW5nO1xufVxuXG5leHBvcnQgY29uc3QgdXNlQ3J5cHRvSWNvbnMgPSAoKSA9PiB7XG4gIGNvbnN0IFtpY29ucywgc2V0SWNvbnNdID0gdXNlU3RhdGU8Q3J5cHRvSWNvbltdPihbXSk7XG4gIGNvbnN0IFtsb2FkaW5nLCBzZXRMb2FkaW5nXSA9IHVzZVN0YXRlKHRydWUpO1xuICBjb25zdCBbZXJyb3IsIHNldEVycm9yXSA9IHVzZVN0YXRlPHN0cmluZyB8IG51bGw+KG51bGwpO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgLy8gU2luY2UgdGhlIEFQSSBlbmRwb2ludCBmb3IgZmV0Y2hpbmcgaWNvbnMgaGFzIGJlZW4gcmVtb3ZlZCxcbiAgICAvLyB3ZSB3aWxsIG5vIGxvbmdlciBmZXRjaCBpY29ucyBmcm9tIGEgYmFja2VuZC5cbiAgICAvLyBJbiBhIHJlYWwgYXBwbGljYXRpb24sIHlvdSB3b3VsZCByZXBsYWNlIHRoaXMgd2l0aCBhIGRpZmZlcmVudFxuICAgIC8vIG1ldGhvZCBvZiBhY3F1aXJpbmcgaWNvbiBkYXRhLCBlLmcuLCBmcm9tIGEgc3RhdGljIGRhdGEgZmlsZVxuICAgIC8vIG9yIGFuIGV4dGVybmFsIHNlcnZpY2UuIEZvciBub3csIHdlIHdpbGwgc2ltcGx5IHNldCBhbiBlbXB0eSBhcnJheS5cbiAgICBzZXRJY29ucyhbXSk7XG4gICAgc2V0TG9hZGluZyhmYWxzZSk7XG4gICAgc2V0RXJyb3IoXCJJY29uIEFQSSBlbmRwb2ludCByZW1vdmVkLiBJY29ucyBhcmUgbm90IGJlaW5nIGZldGNoZWQuXCIpO1xuICB9LCBbXSk7XG5cbiAgcmV0dXJuIHsgaWNvbnMsIGxvYWRpbmcsIGVycm9yIH07XG59OyJdLCJuYW1lcyI6WyJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsInVzZUNyeXB0b0ljb25zIiwiaWNvbnMiLCJzZXRJY29ucyIsImxvYWRpbmciLCJzZXRMb2FkaW5nIiwiZXJyb3IiLCJzZXRFcnJvciJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./hooks/useCryptoIcons.ts\n"));

/***/ })

});