"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "(pages-dir-browser)/./hooks/useCryptoIcons.ts":
/*!*********************************!*\
  !*** ./hooks/useCryptoIcons.ts ***!
  \*********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useCryptoIcons: () => (/* binding */ useCryptoIcons)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(pages-dir-browser)/./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\n// A helper function to format the icon data from file names\nconst formatIconData = (fileNames)=>{\n    return fileNames.map((fileName)=>{\n        const nameWithoutExtension = fileName.replace('.svg', '');\n        let displayName = nameWithoutExtension;\n        let symbol = '';\n        // Attempt to parse names like \"Crypto Name (SYMBOL).svg\"\n        const match = nameWithoutExtension.match(/(.*)\\s\\(([^)]+)\\)$/);\n        if (match) {\n            displayName = match[1].trim();\n            symbol = match[2].trim();\n        } else {\n            // Fallback for names like \"crypto-name.svg\"\n            displayName = nameWithoutExtension.split('-').map((word)=>word.charAt(0).toUpperCase() + word.slice(1)).join(' ');\n            symbol = nameWithoutExtension.toUpperCase(); // Placeholder, might not be accurate\n        }\n        return {\n            name: nameWithoutExtension,\n            fileName: fileName,\n            path: \"/icons/\".concat(fileName),\n            displayName: displayName,\n            symbol: symbol\n        };\n    });\n};\nconst useCryptoIcons = ()=>{\n    const [icons, setIcons] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(true);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useCryptoIcons.useEffect\": ()=>{\n            const fetchIcons = {\n                \"useCryptoIcons.useEffect.fetchIcons\": async ()=>{\n                    try {\n                        // In a real application, you would fetch this list from a backend endpoint\n                        // or use a build-time script to generate a manifest.\n                        // For this example, we'll simulate fetching file names.\n                        const response = await fetch('/api/icons');\n                        if (!response.ok) {\n                            throw new Error(\"HTTP error! status: \".concat(response.status));\n                        }\n                        const data = await response.json();\n                        const iconFileNames = data.files || [];\n                        // For now, I'm hardcoding a few based on the earlier list_dir output\n                        // 'ZKSwap (ZKS).svg',\n                        // 'Zilliqa (ZIL).svg',\n                        // 'ZEON (ZEON).svg',\n                        // 'Zenon (ZNN).svg',\n                        // 'Zelwin (ZLW).svg',\n                        // 'Zel (Zel).svg',\n                        // 'Zclassic (Zcl).svg',\n                        // 'Zcash (ZEC).svg',\n                        // 'ZB Token (ZB).svg',\n                        // 'Yoyow (Yoyow).svg',\n                        // 'yOUcash (YOUC).svg',\n                        // 'yearn.finance (YFI).svg',\n                        // 'XYO (XYO).svg',\n                        // 'Xtrabytes (Xby).svg',\n                        // 'XRP (XRP).svg'\n                        const formattedIcons = formatIconData(iconFileNames);\n                        setIcons(formattedIcons);\n                    } catch (err) {\n                        setError('Failed to load crypto icons.');\n                        console.error(err);\n                    } finally{\n                        setLoading(false);\n                    }\n                }\n            }[\"useCryptoIcons.useEffect.fetchIcons\"];\n            fetchIcons();\n        }\n    }[\"useCryptoIcons.useEffect\"], []);\n    return {\n        icons,\n        loading,\n        error\n    };\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1icm93c2VyKS8uL2hvb2tzL3VzZUNyeXB0b0ljb25zLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE0QztBQVM1Qyw0REFBNEQ7QUFDNUQsTUFBTUUsaUJBQWlCLENBQUNDO0lBQ3RCLE9BQU9BLFVBQVVDLEdBQUcsQ0FBQ0MsQ0FBQUE7UUFDbkIsTUFBTUMsdUJBQXVCRCxTQUFTRSxPQUFPLENBQUMsUUFBUTtRQUN0RCxJQUFJQyxjQUFjRjtRQUNsQixJQUFJRyxTQUFTO1FBRWIseURBQXlEO1FBQ3pELE1BQU1DLFFBQVFKLHFCQUFxQkksS0FBSyxDQUFDO1FBQ3pDLElBQUlBLE9BQU87WUFDVEYsY0FBY0UsS0FBSyxDQUFDLEVBQUUsQ0FBQ0MsSUFBSTtZQUMzQkYsU0FBU0MsS0FBSyxDQUFDLEVBQUUsQ0FBQ0MsSUFBSTtRQUN4QixPQUFPO1lBQ0wsNENBQTRDO1lBQzVDSCxjQUFjRixxQkFBcUJNLEtBQUssQ0FBQyxLQUFLUixHQUFHLENBQUNTLENBQUFBLE9BQVFBLEtBQUtDLE1BQU0sQ0FBQyxHQUFHQyxXQUFXLEtBQUtGLEtBQUtHLEtBQUssQ0FBQyxJQUFJQyxJQUFJLENBQUM7WUFDN0dSLFNBQVNILHFCQUFxQlMsV0FBVyxJQUFJLHFDQUFxQztRQUNwRjtRQUVBLE9BQU87WUFDTEcsTUFBTVo7WUFDTkQsVUFBVUE7WUFDVmMsTUFBTSxVQUFtQixPQUFUZDtZQUNoQkcsYUFBYUE7WUFDYkMsUUFBUUE7UUFDVjtJQUNGO0FBQ0Y7QUFFTyxNQUFNVyxpQkFBaUI7SUFDNUIsTUFBTSxDQUFDQyxPQUFPQyxTQUFTLEdBQUd0QiwrQ0FBUUEsQ0FBZSxFQUFFO0lBQ25ELE1BQU0sQ0FBQ3VCLFNBQVNDLFdBQVcsR0FBR3hCLCtDQUFRQSxDQUFVO0lBQ2hELE1BQU0sQ0FBQ3lCLE9BQU9DLFNBQVMsR0FBRzFCLCtDQUFRQSxDQUFnQjtJQUVsREMsZ0RBQVNBO29DQUFDO1lBQ1IsTUFBTTBCO3VEQUFhO29CQUNqQixJQUFJO3dCQUNGLDJFQUEyRTt3QkFDM0UscURBQXFEO3dCQUNyRCx3REFBd0Q7d0JBQ3hELE1BQU1DLFdBQVcsTUFBTUMsTUFBTTt3QkFDN0IsSUFBSSxDQUFDRCxTQUFTRSxFQUFFLEVBQUU7NEJBQ2hCLE1BQU0sSUFBSUMsTUFBTSx1QkFBdUMsT0FBaEJILFNBQVNJLE1BQU07d0JBQ3hEO3dCQUNBLE1BQU1DLE9BQU8sTUFBTUwsU0FBU00sSUFBSTt3QkFDaEMsTUFBTUMsZ0JBQWdCRixLQUFLRyxLQUFLLElBQUksRUFBRTt3QkFFdEMscUVBQXFFO3dCQUNyRSxzQkFBc0I7d0JBQ3RCLHVCQUF1Qjt3QkFDdkIscUJBQXFCO3dCQUNyQixxQkFBcUI7d0JBQ3JCLHNCQUFzQjt3QkFDdEIsbUJBQW1CO3dCQUNuQix3QkFBd0I7d0JBQ3hCLHFCQUFxQjt3QkFDckIsdUJBQXVCO3dCQUN2Qix1QkFBdUI7d0JBQ3ZCLHdCQUF3Qjt3QkFDeEIsNkJBQTZCO3dCQUM3QixtQkFBbUI7d0JBQ25CLHlCQUF5Qjt3QkFDekIsa0JBQWtCO3dCQUVsQixNQUFNQyxpQkFBaUJuQyxlQUFlaUM7d0JBQ3RDYixTQUFTZTtvQkFDWCxFQUFFLE9BQU9DLEtBQUs7d0JBQ1paLFNBQVM7d0JBQ1RhLFFBQVFkLEtBQUssQ0FBQ2E7b0JBQ2hCLFNBQVU7d0JBQ1JkLFdBQVc7b0JBQ2I7Z0JBQ0Y7O1lBRUFHO1FBQ0Y7bUNBQUcsRUFBRTtJQUVMLE9BQU87UUFBRU47UUFBT0U7UUFBU0U7SUFBTTtBQUNqQyxFQUFFIiwic291cmNlcyI6WyIvVXNlcnMvdmlldHZ0YzQvRG9jdW1lbnRzL0NyeXB0b2ljb25zL2hvb2tzL3VzZUNyeXB0b0ljb25zLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBDcnlwdG9JY29uIH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5pbnRlcmZhY2UgVXNlQ3J5cHRvSWNvbnNSZXN1bHQge1xuICBpY29uczogQ3J5cHRvSWNvbltdO1xuICBsb2FkaW5nOiBib29sZWFuO1xuICBlcnJvcjogc3RyaW5nIHwgbnVsbDtcbn1cblxuLy8gQSBoZWxwZXIgZnVuY3Rpb24gdG8gZm9ybWF0IHRoZSBpY29uIGRhdGEgZnJvbSBmaWxlIG5hbWVzXG5jb25zdCBmb3JtYXRJY29uRGF0YSA9IChmaWxlTmFtZXM6IHN0cmluZ1tdKTogQ3J5cHRvSWNvbltdID0+IHtcbiAgcmV0dXJuIGZpbGVOYW1lcy5tYXAoZmlsZU5hbWUgPT4ge1xuICAgIGNvbnN0IG5hbWVXaXRob3V0RXh0ZW5zaW9uID0gZmlsZU5hbWUucmVwbGFjZSgnLnN2ZycsICcnKTtcbiAgICBsZXQgZGlzcGxheU5hbWUgPSBuYW1lV2l0aG91dEV4dGVuc2lvbjtcbiAgICBsZXQgc3ltYm9sID0gJyc7XG5cbiAgICAvLyBBdHRlbXB0IHRvIHBhcnNlIG5hbWVzIGxpa2UgXCJDcnlwdG8gTmFtZSAoU1lNQk9MKS5zdmdcIlxuICAgIGNvbnN0IG1hdGNoID0gbmFtZVdpdGhvdXRFeHRlbnNpb24ubWF0Y2goLyguKilcXHNcXCgoW14pXSspXFwpJC8pO1xuICAgIGlmIChtYXRjaCkge1xuICAgICAgZGlzcGxheU5hbWUgPSBtYXRjaFsxXS50cmltKCk7XG4gICAgICBzeW1ib2wgPSBtYXRjaFsyXS50cmltKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEZhbGxiYWNrIGZvciBuYW1lcyBsaWtlIFwiY3J5cHRvLW5hbWUuc3ZnXCJcbiAgICAgIGRpc3BsYXlOYW1lID0gbmFtZVdpdGhvdXRFeHRlbnNpb24uc3BsaXQoJy0nKS5tYXAod29yZCA9PiB3b3JkLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgd29yZC5zbGljZSgxKSkuam9pbignICcpO1xuICAgICAgc3ltYm9sID0gbmFtZVdpdGhvdXRFeHRlbnNpb24udG9VcHBlckNhc2UoKTsgLy8gUGxhY2Vob2xkZXIsIG1pZ2h0IG5vdCBiZSBhY2N1cmF0ZVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiBuYW1lV2l0aG91dEV4dGVuc2lvbiwgLy8gVXNlIHRoZSBmaWxlIG5hbWUgYXMgYSB1bmlxdWUgaWRlbnRpZmllclxuICAgICAgZmlsZU5hbWU6IGZpbGVOYW1lLFxuICAgICAgcGF0aDogYC9pY29ucy8ke2ZpbGVOYW1lfWAsIC8vIENvcnJlY3QgcGF0aCB0byB0aGUgcHVibGljIGRpcmVjdG9yeVxuICAgICAgZGlzcGxheU5hbWU6IGRpc3BsYXlOYW1lLFxuICAgICAgc3ltYm9sOiBzeW1ib2wsXG4gICAgfTtcbiAgfSk7XG59O1xuXG5leHBvcnQgY29uc3QgdXNlQ3J5cHRvSWNvbnMgPSAoKTogVXNlQ3J5cHRvSWNvbnNSZXN1bHQgPT4ge1xuICBjb25zdCBbaWNvbnMsIHNldEljb25zXSA9IHVzZVN0YXRlPENyeXB0b0ljb25bXT4oW10pO1xuICBjb25zdCBbbG9hZGluZywgc2V0TG9hZGluZ10gPSB1c2VTdGF0ZTxib29sZWFuPih0cnVlKTtcbiAgY29uc3QgW2Vycm9yLCBzZXRFcnJvcl0gPSB1c2VTdGF0ZTxzdHJpbmcgfCBudWxsPihudWxsKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IGZldGNoSWNvbnMgPSBhc3luYyAoKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBJbiBhIHJlYWwgYXBwbGljYXRpb24sIHlvdSB3b3VsZCBmZXRjaCB0aGlzIGxpc3QgZnJvbSBhIGJhY2tlbmQgZW5kcG9pbnRcbiAgICAgICAgLy8gb3IgdXNlIGEgYnVpbGQtdGltZSBzY3JpcHQgdG8gZ2VuZXJhdGUgYSBtYW5pZmVzdC5cbiAgICAgICAgLy8gRm9yIHRoaXMgZXhhbXBsZSwgd2UnbGwgc2ltdWxhdGUgZmV0Y2hpbmcgZmlsZSBuYW1lcy5cbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgnL2FwaS9pY29ucycpO1xuICAgICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBIVFRQIGVycm9yISBzdGF0dXM6ICR7cmVzcG9uc2Uuc3RhdHVzfWApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICAgIGNvbnN0IGljb25GaWxlTmFtZXMgPSBkYXRhLmZpbGVzIHx8IFtdO1xuXG4gICAgICAgIC8vIEZvciBub3csIEknbSBoYXJkY29kaW5nIGEgZmV3IGJhc2VkIG9uIHRoZSBlYXJsaWVyIGxpc3RfZGlyIG91dHB1dFxuICAgICAgICAvLyAnWktTd2FwIChaS1MpLnN2ZycsXG4gICAgICAgIC8vICdaaWxsaXFhIChaSUwpLnN2ZycsXG4gICAgICAgIC8vICdaRU9OIChaRU9OKS5zdmcnLFxuICAgICAgICAvLyAnWmVub24gKFpOTikuc3ZnJyxcbiAgICAgICAgLy8gJ1plbHdpbiAoWkxXKS5zdmcnLFxuICAgICAgICAvLyAnWmVsIChaZWwpLnN2ZycsXG4gICAgICAgIC8vICdaY2xhc3NpYyAoWmNsKS5zdmcnLFxuICAgICAgICAvLyAnWmNhc2ggKFpFQykuc3ZnJyxcbiAgICAgICAgLy8gJ1pCIFRva2VuIChaQikuc3ZnJyxcbiAgICAgICAgLy8gJ1lveW93IChZb3lvdykuc3ZnJyxcbiAgICAgICAgLy8gJ3lPVWNhc2ggKFlPVUMpLnN2ZycsXG4gICAgICAgIC8vICd5ZWFybi5maW5hbmNlIChZRkkpLnN2ZycsXG4gICAgICAgIC8vICdYWU8gKFhZTykuc3ZnJyxcbiAgICAgICAgLy8gJ1h0cmFieXRlcyAoWGJ5KS5zdmcnLFxuICAgICAgICAvLyAnWFJQIChYUlApLnN2ZydcblxuICAgICAgICBjb25zdCBmb3JtYXR0ZWRJY29ucyA9IGZvcm1hdEljb25EYXRhKGljb25GaWxlTmFtZXMpO1xuICAgICAgICBzZXRJY29ucyhmb3JtYXR0ZWRJY29ucyk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgc2V0RXJyb3IoJ0ZhaWxlZCB0byBsb2FkIGNyeXB0byBpY29ucy4nKTtcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgc2V0TG9hZGluZyhmYWxzZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGZldGNoSWNvbnMoKTtcbiAgfSwgW10pO1xuXG4gIHJldHVybiB7IGljb25zLCBsb2FkaW5nLCBlcnJvciB9O1xufTsiXSwibmFtZXMiOlsidXNlU3RhdGUiLCJ1c2VFZmZlY3QiLCJmb3JtYXRJY29uRGF0YSIsImZpbGVOYW1lcyIsIm1hcCIsImZpbGVOYW1lIiwibmFtZVdpdGhvdXRFeHRlbnNpb24iLCJyZXBsYWNlIiwiZGlzcGxheU5hbWUiLCJzeW1ib2wiLCJtYXRjaCIsInRyaW0iLCJzcGxpdCIsIndvcmQiLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsInNsaWNlIiwiam9pbiIsIm5hbWUiLCJwYXRoIiwidXNlQ3J5cHRvSWNvbnMiLCJpY29ucyIsInNldEljb25zIiwibG9hZGluZyIsInNldExvYWRpbmciLCJlcnJvciIsInNldEVycm9yIiwiZmV0Y2hJY29ucyIsInJlc3BvbnNlIiwiZmV0Y2giLCJvayIsIkVycm9yIiwic3RhdHVzIiwiZGF0YSIsImpzb24iLCJpY29uRmlsZU5hbWVzIiwiZmlsZXMiLCJmb3JtYXR0ZWRJY29ucyIsImVyciIsImNvbnNvbGUiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./hooks/useCryptoIcons.ts\n"));

/***/ })

});